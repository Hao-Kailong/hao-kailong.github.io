<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hold the Torch</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://haokailong.top/"/>
  <updated>2021-04-11T11:26:43.745Z</updated>
  <id>http://haokailong.top/</id>
  
  <author>
    <name>dinosaur</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>剑指offer-丑数</title>
    <link href="http://haokailong.top/2021/04/11/%E5%89%91%E6%8C%87offer-%E4%B8%91%E6%95%B0/"/>
    <id>http://haokailong.top/2021/04/11/剑指offer-丑数/</id>
    <published>2021-04-11T11:24:31.000Z</published>
    <updated>2021-04-11T11:26:43.745Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">GetUglyNumber_Solution</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; <span class="number">7</span>)<span class="keyword">return</span> index;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; res(index);</span><br><span class="line">        res[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> t2 = <span class="number">0</span>, t3 = <span class="number">0</span>, t5 = <span class="number">0</span>, i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; index; ++i)</span><br><span class="line">        &#123;</span><br><span class="line">            res[i] = min(res[t2] * <span class="number">2</span>, min(res[t3] * <span class="number">3</span>, res[t5] * <span class="number">5</span>));</span><br><span class="line">            <span class="keyword">if</span> (res[i] == res[t2] * <span class="number">2</span>)t2++;</span><br><span class="line">            <span class="keyword">if</span> (res[i] == res[t3] * <span class="number">3</span>)t3++;</span><br><span class="line">            <span class="keyword">if</span> (res[i] == res[t5] * <span class="number">5</span>)t5++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res[index - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>Key Point: <strong>每一个丑数都是由之前的丑数乘二、乘三、乘五得到的</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="LeetCode" scheme="http://haokailong.top/tags/LeetCode/"/>
    
      <category term="剑指offer" scheme="http://haokailong.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
  </entry>
  
  <entry>
    <title>形象理解进程与线程的区别</title>
    <link href="http://haokailong.top/2021/04/10/%E5%BD%A2%E8%B1%A1%E7%90%86%E8%A7%A3%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haokailong.top/2021/04/10/形象理解进程与线程的区别/</id>
    <published>2021-04-10T04:43:32.000Z</published>
    <updated>2021-04-10T04:49:23.739Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在知乎上看到了一个大佬的答案，感觉很形象：</p><p><a href="https://www.zhihu.com/question/25532384/answer/81152571" target="_blank" rel="noopener">https://www.zhihu.com/question/25532384/answer/81152571</a></p><p><a href="http://biaodianfu.com" target="_blank" rel="noopener">biaodianfu</a>的回答：</p></blockquote><p>看了一遍排在前面的答案，类似”<strong>进程是资源分配的最小单位，线程是CPU调度的最小单位“</strong>这样的回答感觉太抽象，都不太容易让人理解。</p><p>做个简单的比喻：进程=火车，线程=车厢</p><ul><li>线程在进程下行进（单纯的车厢无法运行）</li><li>一个进程可以包含多个线程（一辆火车可以有多个车厢）</li><li>不同进程间数据很难共享（一辆火车上的乘客很难换到另外一辆火车，比如站点换乘）</li><li>同一进程下不同线程间数据很易共享（A车厢换到B车厢很容易）</li><li>进程要比线程消耗更多的计算机资源（采用多列火车相比多个车厢更耗资源）</li><li>进程间不会相互影响，一个线程挂掉将导致整个进程挂掉（一列火车不会影响到另外一列火车，但是如果一列火车上中间的一节车厢着火了，将影响到所有车厢）</li><li>进程可以拓展到多机，线程最多扩展到多核CPU，而不能扩展到多机（不同火车可以开在多个轨道上，同一火车的车厢不能在行进的不同的轨道上）</li><li>进程使用的内存地址可以上锁，即一个线程使用某些共享内存时，其他线程必须等它结束，才能使用这一块内存。（比如火车上的洗手间）－”互斥锁”</li><li>进程使用的内存地址可以限定使用量（比如火车上的餐厅，最多只允许多少人进入，如果满了需要在门口等，等有人出来了才能进去）－“信号量”</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在知乎上看到了一个大佬的答案，感觉很形象：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/25532384/answer/81152571&quot; target=&quot;_blank&quot; rel=&quot;noopener
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="进程" scheme="http://haokailong.top/tags/%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="线程" scheme="http://haokailong.top/tags/%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="操作系统" scheme="http://haokailong.top/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="OS" scheme="http://haokailong.top/tags/OS/"/>
    
  </entry>
  
  <entry>
    <title>百度2022春招面经</title>
    <link href="http://haokailong.top/2021/04/10/%E7%99%BE%E5%BA%A62022%E6%98%A5%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
    <id>http://haokailong.top/2021/04/10/百度2022春招面经/</id>
    <published>2021-04-10T03:51:17.000Z</published>
    <updated>2021-04-10T04:40:06.936Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h1><ul><li>介绍简历项目</li><li>在项目中遇到了什么困难？</li><li>算法题：有8升、3升、5升的水杯，8升满，其余空，如何得到4升水？<ul><li>8升    3升    5升</li><li>8    0    0</li><li>3    0    5</li><li>3    3    2</li><li>6    0    2</li><li>1    2    5</li><li>1    3    4</li></ul></li></ul><h1 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h1><a id="more"></a><ul><li>给定下述代码，提出存在的问题以及优化方法</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TONUM(x) x - <span class="meta-string">'0'</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">matoi</span><span class="params">(<span class="keyword">char</span> *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> res;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="built_in">strlen</span>(p);i++)</span><br><span class="line">&#123;</span><br><span class="line">res = res * <span class="number">10</span> + TONUM(p[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>存在的问题：</p><ol><li><code>res</code>没有初始化</li><li>没有<code>#include&lt;string.h&gt;</code></li><li>可能存在<code>int</code>型溢出</li></ol><p>优化：</p><ol><li><code>res</code>初始化为零</li><li><code>#include&lt;string.h&gt;</code></li><li>在<code>res</code>更新前进行溢出判断，是否超出<code>2147483647</code></li><li>前置零可直接跳过，提高效率</li><li><code>n=strlen(p)</code>，避免重复调用</li></ol><ul><li>共享单车如何找到最近的车辆？对问题建模。</li></ul><p>建模为二维坐标，在数据库中按照横纵轴从小到大的顺序排列，然后二分查找。可以分区存储，将各个城市存到不同的表格中，减小搜索空间。</p><ul><li>都知道哪些排序算法？快排简单介绍。</li><li>进程与线程的区别？</li><li>进程间的通信方法？</li></ul><h1 id="三面"><a href="#三面" class="headerlink" title="三面"></a>三面</h1><ul><li>自己的兴趣爱好？</li><li>简历上的论文详细介绍</li><li>实习想要做什么方向？</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>面试官都挺好的，友善轻松的氛围。面试体验不错~希望自己顺利拿到offer~</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一面&quot;&gt;&lt;a href=&quot;#一面&quot; class=&quot;headerlink&quot; title=&quot;一面&quot;&gt;&lt;/a&gt;一面&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;介绍简历项目&lt;/li&gt;
&lt;li&gt;在项目中遇到了什么困难？&lt;/li&gt;
&lt;li&gt;算法题：有8升、3升、5升的水杯，8升满，其余空，如何得到4升水？&lt;ul&gt;
&lt;li&gt;8升    3升    5升&lt;/li&gt;
&lt;li&gt;8    0    0&lt;/li&gt;
&lt;li&gt;3    0    5&lt;/li&gt;
&lt;li&gt;3    3    2&lt;/li&gt;
&lt;li&gt;6    0    2&lt;/li&gt;
&lt;li&gt;1    2    5&lt;/li&gt;
&lt;li&gt;1    3    4&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;二面&quot;&gt;&lt;a href=&quot;#二面&quot; class=&quot;headerlink&quot; title=&quot;二面&quot;&gt;&lt;/a&gt;二面&lt;/h1&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="百度" scheme="http://haokailong.top/tags/%E7%99%BE%E5%BA%A6/"/>
    
      <category term="Baidu" scheme="http://haokailong.top/tags/Baidu/"/>
    
      <category term="interview" scheme="http://haokailong.top/tags/interview/"/>
    
  </entry>
  
  <entry>
    <title>DivideMix: Learning with Noisy Labels as Semi-supervised Learning</title>
    <link href="http://haokailong.top/2021/04/09/DivideMix-Learning-with-Noisy-Labels-as-Semi-supervised-Learning/"/>
    <id>http://haokailong.top/2021/04/09/DivideMix-Learning-with-Noisy-Labels-as-Semi-supervised-Learning/</id>
    <published>2021-04-09T15:13:17.000Z</published>
    <updated>2021-04-09T16:00:47.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-任务"><a href="#1-任务" class="headerlink" title="1. 任务"></a>1. 任务</h1><p>提升模型在远程监督数据（含噪音标签的数据）建模中的性能</p><p>远程监督：Distant Supervision，将已有的知识库对应到丰富的非结构化数据中，从而生成大量的训练数据</p><h1 id="2-背景"><a href="#2-背景" class="headerlink" title="2. 背景"></a>2. 背景</h1><p>模型发展：深度神经网络（ DNNs ）结构复杂性，需要更多的数据来拟合</p><p>高质量的标注数据耗时、代价昂贵</p><p>远程监督方法获取数据标签不纯净</p><p>有研究表明，DNNs 可轻易地过拟合噪音标签，导致模型泛化性能差</p><h1 id="3-噪音标签学习研究现状"><a href="#3-噪音标签学习研究现状" class="headerlink" title="3. 噪音标签学习研究现状"></a>3. 噪音标签学习研究现状</h1><p>Learning with Noisy Labels (LNL) 主流方法：损失校正方法</p><ul><li>噪音转移矩阵：利用 DNNs 的预测结果修正。<em>高噪音比</em>时效果差，DNNs 的预测结果受噪音影响大</li></ul><ul><li>Reweight 噪音数据，使其损失占比小。一般认为损失小的为干净样本</li></ul><p>半监督学习（SSL）</p><ul><li>数据：labeled and unlabeled data</li><li>旨在通过利用未标注数据提升模型的性能</li><li>MixMatch：一个框架中统一几种先进SSL方法</li></ul><h1 id="4-DivideMix"><a href="#4-DivideMix" class="headerlink" title="4. DivideMix"></a>4. DivideMix</h1><p><img src="https://pic4.zhimg.com/80/v2-12cf60095f2bbad803c2b60e7437e2bf_720w.jpg" alt></p><a id="more"></a><p><img src="https://pic1.zhimg.com/80/v2-86ae8211b4b26dd847f34c04b034aa1c_720w.jpg" alt></p><p>为了避免在self-traning过程中的<strong>确认偏差</strong>导致的误差累积，同时训练两个网络去过滤彼此的错误：Epoch-level隐式的teaching &amp; Batch-level显式的teaching</p><p><strong>Co-Divide</strong></p><p>DNNs学习干净的数据比噪音数据快，干净数据低损失</p><p>使用交叉熵损失函数来计算每个样本的损失：</p><p>$\mathcal{l} (\theta) = {-\sum<em>{c=1}^{C} y_i^c\log(\mathrm{p}</em>{model}^c(x<em>i;\theta))}</em>{i=1}^N$</p><h2 id="4-1-高斯混合模型"><a href="#4-1-高斯混合模型" class="headerlink" title="4.1. 高斯混合模型"></a>4.1. 高斯混合模型</h2><p><strong>高斯混合模型</strong>（Gaussian Mixture Model ，GMM），由于其在分布锐度上的灵活性较好，能够更好地区分干净和噪音样本，所以本文使用 GMM，<strong>在每个样本的损失分布上动态拟合高斯混合模型</strong>：$wi =p(g|l_i)$ . 通过在$w_i$上设置阈值t，将数据分为干净数据（标注数据）和噪音数据（未标注数据），用于后续 SSL</p><p>A、B网络由于不同的(随机)参数初始化、不同的训练数据划分、不同的(随机)小批序列以及不同的训练目标，使得两个网络保持了一定的离散性，使得两种网络具有不同的过滤不同类型错误的能力，使得模型对噪声的鲁棒性更强</p><h2 id="4-2-非对称噪音置信度惩罚"><a href="#4-2-非对称噪音置信度惩罚" class="headerlink" title="4.2. 非对称噪音置信度惩罚"></a>4.2. 非对称噪音置信度惩罚</h2><p>为了模型的收敛，起始几个epoch会用全部数据训练，即warm-up,对在均匀随机的对称噪音数据是有效的，但是本文讨论的数据噪音是不对（类条件）称的，因此在warm-up的过程中会快速的拟合噪音，产生低熵预测，导致GMM不能有效的区分干净和噪音数据，本文添加一个负熵项惩罚置信预测，使其产生的预测能后产生低熵损失，有利于产生高置信度的标签</p><p>$\mathcal{H} = -\sum<em>c \mathrm{p}</em>{model}^c(x;\theta) \log (\mathrm{p}_{model}^c(x;\theta))$</p><p><img src="https://pic1.zhimg.com/80/v2-674851389a1a8776cda043f2198a95bc_720w.jpg" alt></p><h1 id="5-评价"><a href="#5-评价" class="headerlink" title="5. 评价"></a>5. 评价</h1><blockquote><p>Co-teaching的思路+MixMatch缝合出来的东西。唯一觉得有意思的地方就是问题设定的强制转换。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;1-任务&quot;&gt;&lt;a href=&quot;#1-任务&quot; class=&quot;headerlink&quot; title=&quot;1. 任务&quot;&gt;&lt;/a&gt;1. 任务&lt;/h1&gt;&lt;p&gt;提升模型在远程监督数据（含噪音标签的数据）建模中的性能&lt;/p&gt;
&lt;p&gt;远程监督：Distant Supervision，将已有的知识库对应到丰富的非结构化数据中，从而生成大量的训练数据&lt;/p&gt;
&lt;h1 id=&quot;2-背景&quot;&gt;&lt;a href=&quot;#2-背景&quot; class=&quot;headerlink&quot; title=&quot;2. 背景&quot;&gt;&lt;/a&gt;2. 背景&lt;/h1&gt;&lt;p&gt;模型发展：深度神经网络（ DNNs ）结构复杂性，需要更多的数据来拟合&lt;/p&gt;
&lt;p&gt;高质量的标注数据耗时、代价昂贵&lt;/p&gt;
&lt;p&gt;远程监督方法获取数据标签不纯净&lt;/p&gt;
&lt;p&gt;有研究表明，DNNs 可轻易地过拟合噪音标签，导致模型泛化性能差&lt;/p&gt;
&lt;h1 id=&quot;3-噪音标签学习研究现状&quot;&gt;&lt;a href=&quot;#3-噪音标签学习研究现状&quot; class=&quot;headerlink&quot; title=&quot;3. 噪音标签学习研究现状&quot;&gt;&lt;/a&gt;3. 噪音标签学习研究现状&lt;/h1&gt;&lt;p&gt;Learning with Noisy Labels (LNL) 主流方法：损失校正方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;噪音转移矩阵：利用 DNNs 的预测结果修正。&lt;em&gt;高噪音比&lt;/em&gt;时效果差，DNNs 的预测结果受噪音影响大&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;Reweight 噪音数据，使其损失占比小。一般认为损失小的为干净样本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;半监督学习（SSL）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;数据：labeled and unlabeled data&lt;/li&gt;
&lt;li&gt;旨在通过利用未标注数据提升模型的性能&lt;/li&gt;
&lt;li&gt;MixMatch：一个框架中统一几种先进SSL方法&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;4-DivideMix&quot;&gt;&lt;a href=&quot;#4-DivideMix&quot; class=&quot;headerlink&quot; title=&quot;4. DivideMix&quot;&gt;&lt;/a&gt;4. DivideMix&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;https://pic4.zhimg.com/80/v2-12cf60095f2bbad803c2b60e7437e2bf_720w.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://haokailong.top/categories/Machine-Learning/"/>
    
      <category term="Noisy Label" scheme="http://haokailong.top/categories/Machine-Learning/Noisy-Label/"/>
    
    
      <category term="distant supervision" scheme="http://haokailong.top/tags/distant-supervision/"/>
    
      <category term="noisy label" scheme="http://haokailong.top/tags/noisy-label/"/>
    
      <category term="deep learning" scheme="http://haokailong.top/tags/deep-learning/"/>
    
  </entry>
  
  <entry>
    <title>递减栈</title>
    <link href="http://haokailong.top/2021/04/08/%E9%80%92%E5%87%8F%E6%A0%88/"/>
    <id>http://haokailong.top/2021/04/08/递减栈/</id>
    <published>2021-04-08T12:31:48.000Z</published>
    <updated>2021-04-08T12:35:58.933Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h1><p>定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。</p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Sdata;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; Smin;  <span class="comment">// 递减栈，保留当前最小值 </span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        Sdata.push(value);</span><br><span class="line">        <span class="keyword">if</span> (Smin.empty() || value &lt;= Smin.top())  <span class="comment">// 注意小于等于符号，重复元素 </span></span><br><span class="line">        Smin.push(value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Smin.empty() &amp;&amp; Sdata.top() &lt;= Smin.top())</span><br><span class="line">        Smin.pop();</span><br><span class="line">        Sdata.pop();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Sdata.top();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Smin.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>递增栈，递减栈，递减队列在刷题时多次遇到，需要格外注意。</p><p>其实有种DP的感觉在里面，需要领会👓</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题目描述&quot;&gt;&lt;/a&gt;题目描述&lt;/h1&gt;&lt;p&gt;定义栈的数据结构，请在该类型中实现一个能够得到栈中所含最小元素的min函数（时间复杂度应为O（1））。&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="LeetCode" scheme="http://haokailong.top/tags/LeetCode/"/>
    
      <category term="剑指offer" scheme="http://haokailong.top/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="Stack" scheme="http://haokailong.top/tags/Stack/"/>
    
      <category term="栈" scheme="http://haokailong.top/tags/%E6%A0%88/"/>
    
  </entry>
  
  <entry>
    <title>C++运算符优先级</title>
    <link href="http://haokailong.top/2021/04/08/C-%E8%BF%90%E7%AE%97%E7%AC%A6%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    <id>http://haokailong.top/2021/04/08/C-运算符优先级/</id>
    <published>2021-04-08T08:24:58.000Z</published>
    <updated>2021-04-08T08:29:04.793Z</updated>
    
    <content type="html"><![CDATA[<p>在使用逻辑和算数运算符时，需要注意运算符的优先级，不然会出现意想不到的错误。</p><div class="table-container"><table><thead><tr><th style="text-align:center">优先级</th><th style="text-align:center">运算符</th><th style="text-align:center">说明</th><th style="text-align:center">结合性</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">::</td><td style="text-align:center">范围解析</td><td style="text-align:center">自左向右</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">++  —</td><td style="text-align:center">后缀自增/后缀自减</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">()</td><td style="text-align:center">括号</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">[]</td><td style="text-align:center">数组下标</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">.</td><td style="text-align:center">成员选择（对象）</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">−&gt;</td><td style="text-align:center">成员选择（指针）</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">++  —</td><td style="text-align:center">前缀自增/前缀自减</td><td style="text-align:center">自右向左</td></tr><tr><td style="text-align:center">+  −</td><td style="text-align:center">加/减</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">!  ~</td><td style="text-align:center">逻辑非/按位取反</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">(type)</td><td style="text-align:center">强制类型转换</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*</td><td style="text-align:center">取指针指向的值</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;</td><td style="text-align:center">某某的地址</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">sizeof</td><td style="text-align:center">某某的大小</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">new,new[]</td><td style="text-align:center">动态内存分配/动态数组内存分配</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">delete,delete[]</td><td style="text-align:center">动态内存释放/动态数组内存释放</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">.<em>  -&gt;</em></td><td style="text-align:center">成员对象选择/成员指针选择</td><td style="text-align:center">自左向右</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">*  /   %</td><td style="text-align:center">乘法/除法/取余</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">+  −</td><td style="text-align:center">加号/减号</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">&lt;&lt;  &gt;&gt;</td><td style="text-align:center">位左移/位右移</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">&lt;  &lt;=</td><td style="text-align:center">小于/小于等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&gt;  &gt;=</td><td style="text-align:center">大于/大于等于</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">==  !=</td><td style="text-align:center">等于/不等于</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">&amp;</td><td style="text-align:center">按位与</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">^</td><td style="text-align:center">按位异或</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">\</td><td style="text-align:center"></td><td style="text-align:center">按位或</td><td></td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">&amp;&amp;</td><td style="text-align:center">与运算</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">\</td><td style="text-align:center">\</td><td style="text-align:center"></td><td>或运算</td><td></td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">?:</td><td style="text-align:center">三目运算符</td><td style="text-align:center">自右向左</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">=</td><td style="text-align:center">赋值</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">+=  −=</td><td style="text-align:center">相加后赋值/相减后赋值</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">*=  /=   %=</td><td style="text-align:center">相乘后赋值/相除后赋值/取余后赋值</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&lt;&lt;=  &gt;&gt;=</td><td style="text-align:center">位左移赋值/位右移赋值</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">&amp;=  ^=  \</td><td style="text-align:center">=</td><td style="text-align:center">位与运算后赋值/位异或运算后赋值/位或运算后赋值</td><td style="text-align:center"></td><td></td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">throw</td><td style="text-align:center">抛出异常</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">,</td><td style="text-align:center">逗号</td><td style="text-align:center">自左向右</td></tr></tbody></table></div><p>如果记不清楚的话，加一个括号总是没错的！(●’◡’●)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用逻辑和算数运算符时，需要注意运算符的优先级，不然会出现意想不到的错误。&lt;/p&gt;
&lt;div class=&quot;table-container&quot;&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;优先级&lt;/th&gt;
&lt;th 
      
    
    </summary>
    
    
      <category term="C++" scheme="http://haokailong.top/categories/C/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="优先级" scheme="http://haokailong.top/tags/%E4%BC%98%E5%85%88%E7%BA%A7/"/>
    
  </entry>
  
  <entry>
    <title>C++ STL中的sort()排序稳定吗？</title>
    <link href="http://haokailong.top/2021/04/08/C-STL%E4%B8%AD%E7%9A%84sort-%E6%8E%92%E5%BA%8F%E7%A8%B3%E5%AE%9A%E5%90%97%EF%BC%9F/"/>
    <id>http://haokailong.top/2021/04/08/C-STL中的sort-排序稳定吗？/</id>
    <published>2021-04-08T07:56:54.000Z</published>
    <updated>2021-04-08T08:01:18.482Z</updated>
    
    <content type="html"><![CDATA[<h1 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h1><p><code>sort()</code>排序<strong>当然不是稳定排序</strong>，sort是主要用到了快速排序（平均时间复杂度为O(nlogn)），还结合了插入排序（时间复杂度为O(n2)）和堆排序（时间复杂度为O(nlogn)）。</p><p><img src="https://pic1.zhimg.com/80/v2-8fa032e195365f77fb6b980a4ed71958_720w.jpg" alt></p><a id="more"></a><h1 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h1><p><img src="https://img-blog.csdnimg.cn/20190826224720541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQzMTUyMDUy,size_16,color_FFFFFF,t_70" alt></p><p>Effective STL对如何选择排序函数总结的很好：<br>1）若需对vector, string, deque, 或array容器进行全排序，你可选择sort或stable_sort；<br>2）若只需对vector, string, deque, 或array容器中取得top n的元素，部分排序partial_sort是首选.<br>3）若对于vector, string, deque, 或array容器，你需要找到第n个位置的元素或者你需要得到top n且不关系top n中的内部 顺序，nth_element是最 理想的；<br>4）若你需要从标准序列容器或者array中把满足某个条件 或者不满足某个条件的元素分开，你最好使用partition或stable_partition；<br>5）若使用的list容器，你可以直接使用partition和stable_partition算法，你可以使用list::sort代替sort和stable_sort排序。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;解答&quot;&gt;&lt;a href=&quot;#解答&quot; class=&quot;headerlink&quot; title=&quot;解答&quot;&gt;&lt;/a&gt;解答&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sort()&lt;/code&gt;排序&lt;strong&gt;当然不是稳定排序&lt;/strong&gt;，sort是主要用到了快速排序（平均时间复杂度为O(nlogn)），还结合了插入排序（时间复杂度为O(n2)）和堆排序（时间复杂度为O(nlogn)）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://pic1.zhimg.com/80/v2-8fa032e195365f77fb6b980a4ed71958_720w.jpg&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://haokailong.top/categories/C/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="sort" scheme="http://haokailong.top/tags/sort/"/>
    
      <category term="STL" scheme="http://haokailong.top/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>Latex基本表格绘制</title>
    <link href="http://haokailong.top/2021/04/08/Latex%E5%9F%BA%E6%9C%AC%E8%A1%A8%E6%A0%BC%E7%BB%98%E5%88%B6/"/>
    <id>http://haokailong.top/2021/04/08/Latex基本表格绘制/</id>
    <published>2021-04-08T04:52:58.000Z</published>
    <updated>2021-04-08T05:08:22.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>————————————————<br>版权声明：本文为CSDN博主「派大星爱摸鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/JueChenYi/article/details/77116011" target="_blank" rel="noopener">https://blog.csdn.net/JueChenYi/article/details/77116011</a></p></blockquote><h1 id="1-基本格式"><a href="#1-基本格式" class="headerlink" title="1. 基本格式"></a>1. 基本格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;tabular&#125;&#123;cc&#125;%一个c表示有一列，格式为居中显示(center)</span><br><span class="line">(1,1)&amp;(1,2)\\%第一行第一列和第二列  中间用&amp;连接</span><br><span class="line">(2,1)&amp;(2,2)\\%第二行第一列和第二列  中间用&amp;连接</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812124223652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="2-添加竖线和横线"><a href="#2-添加竖线和横线" class="headerlink" title="2. 添加竖线和横线"></a>2. 添加竖线和横线</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|&#125;% 通过添加 | 来表示是否需要绘制竖线</span><br><span class="line">\hline  % 在表格最上方绘制横线</span><br><span class="line">(1,1)&amp;(1,2)\\</span><br><span class="line">\hline  %在第一行和第二行之间绘制横线</span><br><span class="line">(2,1)&amp;(2,2)\\</span><br><span class="line">\hline % 在表格最下方绘制横线</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812124527902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="3-设置每一列的单元格格式"><a href="#3-设置每一列的单元格格式" class="headerlink" title="3. 设置每一列的单元格格式"></a>3. 设置每一列的单元格格式</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;article&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;tabular&#125;&#123;|l|c|r|&#125; %l(left)居左显示 r(right)居右显示 c居中显示</span><br><span class="line">\hline </span><br><span class="line">Name&amp;Steve&amp;Bill\\</span><br><span class="line">\hline  </span><br><span class="line">Matlab&amp;Mathmatica&amp;Maple\\</span><br><span class="line">\hline </span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812125307589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><a id="more"></a><h1 id="4-常见的三线表"><a href="#4-常见的三线表" class="headerlink" title="4. 常见的三线表"></a>4. 常见的三线表</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;tabular&#125;&#123;ccc&#125;</span><br><span class="line">\hline</span><br><span class="line">姓名&amp; 学号&amp; 性别\\</span><br><span class="line">\hline</span><br><span class="line">Steve Jobs&amp; 001&amp; Male\\</span><br><span class="line">Bill Gates&amp; 002&amp; Female\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812125712341?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>通常来说，我们会希望表格的第一根线和最后一根线比表格中的横线更粗一些。</p><p>booktabs 宏包为我们提供了这个功能，加载 booktabs 宏包之后可以使用 \toprule 和 \bottomrule 命令分别画出表格头和表格底的粗横线，而用 \midrule 画出表格中的横线。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;booktabs&#125; %需要加载宏包&#123;booktabs&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;tabular&#125;&#123;ccc&#125;</span><br><span class="line">\toprule  %添加表格头部粗线</span><br><span class="line">姓名&amp; 学号&amp; 性别\\</span><br><span class="line">\midrule  %添加表格中横线</span><br><span class="line">Steve Jobs&amp; 001&amp; Male\\</span><br><span class="line">Bill Gates&amp; 002&amp; Female\\</span><br><span class="line">\bottomrule %添加表格底部粗线</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812130235218?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="5-table环境"><a href="#5-table环境" class="headerlink" title="5. table环境"></a>5. table环境</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;booktabs&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">\centering</span><br><span class="line">\caption&#123;这是一张三线表&#125;\label&#123;tab:aStrangeTable&#125;%添加标题 设置标签</span><br><span class="line">\begin&#123;tabular&#125;&#123;ccc&#125;</span><br><span class="line">\toprule</span><br><span class="line">姓名&amp; 学号&amp; 性别\\</span><br><span class="line">\midrule</span><br><span class="line">Steve Jobs&amp; 001&amp; Male\\</span><br><span class="line">Bill Gates&amp; 002&amp; Female\\</span><br><span class="line">\bottomrule</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">%\caption&#123;这是一张三线表&#125;\label&#123;tab:aStrangeTable&#125;  标题放在这里也是可以的</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p>{table}有若干可选参数 [!htbp]<br><code>h</code>代表here,将表格排在当前文字位置<br><code>t</code> 表示将表格放在下一页的 top (页首)<br><code>b</code> 表示将表格放在当前页的 bottom (底部)<br><code>!</code>表示忽略美观因素，尽可能按照参数指定的方式来处理表格浮动位置。<br>表格将会按照所给参数，依次尝试按照每个参数进行排版，当无法排版时，将会按照下一个参数</p><h1 id="6-单元格合并"><a href="#6-单元格合并" class="headerlink" title="6. 单元格合并"></a>6. 单元格合并</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">\multicolumn&#123;3&#125;&#123;|c|&#125;&#123;学生信息&#125;\\ % 用\multicolumn&#123;3&#125;表示横向合并三列 </span><br><span class="line">                        % |c|表示居中并且单元格两侧添加竖线 最后是文本</span><br><span class="line">\hline</span><br><span class="line">姓名&amp;学号&amp;性别\\</span><br><span class="line">\hline</span><br><span class="line">Jack&amp; 001&amp; Male\\</span><br><span class="line">\hline</span><br><span class="line">Angela&amp; 002&amp; Female\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\caption&#123;这是一张三线表&#125;</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812134011249?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;multirow&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|c|c|c|c|&#125; %表格7列 全部居中显示</span><br><span class="line">\hline</span><br><span class="line">\multicolumn&#123;7&#125;&#123;|c|&#125;&#123;事件&#125;\\  %横向合并7列单元格  两侧添加竖线</span><br><span class="line">\hline</span><br><span class="line">\multirow&#123;4&#125;*&#123;策略&#125;&amp;50&amp;0&amp;100&amp;200&amp;300&amp;300\\  %纵向合并4行单元格 </span><br><span class="line">\cline&#123;2-7&#125;  %为第二列到第七列添加横线</span><br><span class="line">&amp;100&amp;100&amp;0&amp;100&amp;200&amp;200\\</span><br><span class="line">\cline&#123;2-7&#125;</span><br><span class="line">&amp;150&amp;200&amp;100&amp;0&amp;100&amp;200\\</span><br><span class="line">\cline&#123;2-7&#125;</span><br><span class="line">&amp;200&amp;300&amp;200&amp;100&amp;0&amp;300\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812134954627?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><p>横向合并和纵向合并可以嵌套，代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">\documentclass[UTF8]&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;multirow&#125;</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|c|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line"></span><br><span class="line">\multicolumn&#123;2&#125;&#123;|c|&#125;&#123; \multirow&#123;2&#125;*&#123;$S_i$&#125; &#125;&amp; \multicolumn&#123;4&#125;&#123;c|&#125;&#123;事件&#125; &amp;\multirow&#123;2&#125;*&#123;max&#125;\\</span><br><span class="line">\cline&#123;3-6&#125;</span><br><span class="line">\multicolumn&#123;2&#125;&#123;|c|&#125;&#123;&#125;&amp;50&amp;100&amp;150&amp;200&amp;\\</span><br><span class="line">\hline</span><br><span class="line">\multirow&#123;4&#125;*&#123;策略&#125;&amp;50&amp;0&amp;100&amp;200&amp;300&amp;300\\</span><br><span class="line">\cline&#123;2-7&#125;</span><br><span class="line">&amp;100&amp;100&amp;0&amp;100&amp;200&amp;200\\</span><br><span class="line">\cline&#123;2-7&#125;</span><br><span class="line">&amp;150&amp;200&amp;100&amp;0&amp;100&amp;200\\</span><br><span class="line">\cline&#123;2-7&#125;</span><br><span class="line">&amp;200&amp;300&amp;200&amp;100&amp;0&amp;300\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812140522713?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="7-斜线表头"><a href="#7-斜线表头" class="headerlink" title="7. 斜线表头"></a>7. 斜线表头</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;UTF8&#125;&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;diagbox&#125; % 加载宏包</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">\centering</span><br><span class="line">\begin&#123;tabular&#125;&#123;|c|c|c|c|&#125;</span><br><span class="line">\hline</span><br><span class="line">\diagbox&#123;甲&#125;&#123;$\alpha_&#123;i,j&#125;$&#125;&#123;乙&#125;&amp;$\beta_1$&amp;$\beta_2$&amp;$\beta_3$\\ %添加斜线表头</span><br><span class="line">\hline</span><br><span class="line">$\alpha_1$&amp;-4&amp;0&amp;-8\\</span><br><span class="line">\hline</span><br><span class="line">$\alpha_2$&amp;3&amp;2&amp;4\\</span><br><span class="line">\hline</span><br><span class="line">$\alpha_3$&amp;16&amp;1&amp;-9\\</span><br><span class="line">\hline</span><br><span class="line">$\alpha_4$&amp;-1&amp;1&amp;7\\</span><br><span class="line">\hline</span><br><span class="line">\end&#123;tabular&#125;</span><br><span class="line">\end&#123;table&#125;</span><br><span class="line"></span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdn.net/20170812141817940?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt></p><h1 id="8-其他"><a href="#8-其他" class="headerlink" title="8. 其他"></a>8. 其他</h1><p>对于多行多列嵌套斜线表头的情况，不加参数会出现斜线不处于对角线位置的情况</p><p><img src="https://img-blog.csdnimg.cn/20181123122742980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0p1ZUNoZW5ZaQ==,size_16,color_FFFFFF,t_70" alt></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">\documentclass&#123;ctexart&#125;</span><br><span class="line">\usepackage&#123;multirow&#125;</span><br><span class="line">\usepackage&#123;diagbox&#125; % 加载宏包</span><br><span class="line">\begin&#123;document&#125;</span><br><span class="line"></span><br><span class="line">\begin&#123;table&#125;[!htbp]</span><br><span class="line">  \centering</span><br><span class="line">  \begin&#123;tabular&#125;&#123;|c|c|c|c|c|c|c|&#125;</span><br><span class="line">   \hline</span><br><span class="line">   \multicolumn&#123;2&#125;&#123;|c|&#125;&#123;\multirow&#123;2&#125;*&#123;\diagbox[innerwidth=2cm]&#123;$S_i$&#125;&#123;$\lambda_i$&#125;&#125;&#125;&amp; \multicolumn&#123;4&#125;&#123;c|&#125;&#123;事件&#125; &amp;\multirow&#123;2&#125;*&#123;max&#125;\\</span><br><span class="line">   \cline&#123;3-6&#125;</span><br><span class="line">   \multicolumn&#123;2&#125;&#123;|c|&#125;&#123;&#125;&amp;50&amp;100&amp;150&amp;200&amp;\\</span><br><span class="line">   \hline</span><br><span class="line">   \multirow&#123;4&#125;*&#123;策略&#125;&amp;50&amp;0&amp;100&amp;200&amp;300&amp;300\\</span><br><span class="line">   \cline&#123;2-7&#125;</span><br><span class="line">   &amp;100&amp;100&amp;0&amp;100&amp;200&amp;200\\</span><br><span class="line">   \cline&#123;2-7&#125;</span><br><span class="line">   &amp;150&amp;200&amp;100&amp;0&amp;100&amp;200\\</span><br><span class="line">   \cline&#123;2-7&#125;</span><br><span class="line">   &amp;200&amp;300&amp;200&amp;100&amp;0&amp;300\\</span><br><span class="line">   \hline</span><br><span class="line">  \end&#123;tabular&#125;</span><br><span class="line"> \end&#123;table&#125;</span><br><span class="line">\end&#123;document&#125;</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/20181123123351647.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L0p1ZUNoZW5ZaQ==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;————————————————&lt;br&gt;版权声明：本文为CSDN博主「派大星爱摸鱼」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;br&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/JueChenYi/article/details/77116011&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/JueChenYi/article/details/77116011&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;1-基本格式&quot;&gt;&lt;a href=&quot;#1-基本格式&quot; class=&quot;headerlink&quot; title=&quot;1. 基本格式&quot;&gt;&lt;/a&gt;1. 基本格式&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\documentclass&amp;#123;article&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;tabular&amp;#125;&amp;#123;cc&amp;#125;%一个c表示有一列，格式为居中显示(center)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1,1)&amp;amp;(1,2)\\%第一行第一列和第二列  中间用&amp;amp;连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2,1)&amp;amp;(2,2)\\%第二行第一列和第二列  中间用&amp;amp;连接&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;tabular&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170812124223652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-添加竖线和横线&quot;&gt;&lt;a href=&quot;#2-添加竖线和横线&quot; class=&quot;headerlink&quot; title=&quot;2. 添加竖线和横线&quot;&gt;&lt;/a&gt;2. 添加竖线和横线&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\documentclass&amp;#123;article&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;tabular&amp;#125;&amp;#123;|c|c|&amp;#125;% 通过添加 | 来表示是否需要绘制竖线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline  % 在表格最上方绘制横线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(1,1)&amp;amp;(1,2)\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline  %在第一行和第二行之间绘制横线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(2,1)&amp;amp;(2,2)\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline % 在表格最下方绘制横线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;tabular&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170812124527902?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt&gt;&lt;/p&gt;
&lt;h1 id=&quot;3-设置每一列的单元格格式&quot;&gt;&lt;a href=&quot;#3-设置每一列的单元格格式&quot; class=&quot;headerlink&quot; title=&quot;3. 设置每一列的单元格格式&quot;&gt;&lt;/a&gt;3. 设置每一列的单元格格式&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;\documentclass&amp;#123;article&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\begin&amp;#123;tabular&amp;#125;&amp;#123;|l|c|r|&amp;#125; %l(left)居左显示 r(right)居右显示 c居中显示&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Name&amp;amp;Steve&amp;amp;Bill\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Matlab&amp;amp;Mathmatica&amp;amp;Maple\\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\hline &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;tabular&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\end&amp;#123;document&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://img-blog.csdn.net/20170812125307589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvSnVlQ2hlbllp/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Tool" scheme="http://haokailong.top/categories/Others/Tool/"/>
    
    
      <category term="Latex" scheme="http://haokailong.top/tags/Latex/"/>
    
      <category term="table" scheme="http://haokailong.top/tags/table/"/>
    
      <category term="overleaf" scheme="http://haokailong.top/tags/overleaf/"/>
    
  </entry>
  
  <entry>
    <title>C++中头文件bits/stdc++.h</title>
    <link href="http://haokailong.top/2021/04/06/C-%E4%B8%AD%E5%A4%B4%E6%96%87%E4%BB%B6-bits-stdc-h/"/>
    <id>http://haokailong.top/2021/04/06/C-中头文件-bits-stdc-h/</id>
    <published>2021-04-06T10:48:08.000Z</published>
    <updated>2021-04-12T14:28:25.871Z</updated>
    
    <content type="html"><![CDATA[<p>在刷题的过程中，发现有<code>bits/stdc++.h</code>这样一个头文件。</p><p>发现它是部分C++中支持的一个几乎万能的头文件，包含所有的可用到的C++库函数，如istream, ostream, stack, queue.</p><p>该头文件的详细内容如下</p><a id="more"></a><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C++ includes used for precompiling -*- C++ -*-</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Copyright (C) 2003-2013 Free Software Foundation, Inc.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// This file is part of the GNU ISO C++ Library.  This library is free</span></span><br><span class="line"><span class="comment">// software; you can redistribute it and/or modify it under the</span></span><br><span class="line"><span class="comment">// terms of the GNU General Public License as published by the</span></span><br><span class="line"><span class="comment">// Free Software Foundation; either version 3, or (at your option)</span></span><br><span class="line"><span class="comment">// any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// This library is distributed in the hope that it will be useful,</span></span><br><span class="line"><span class="comment">// but WITHOUT ANY WARRANTY; without even the implied warranty of</span></span><br><span class="line"><span class="comment">// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></span><br><span class="line"><span class="comment">// GNU General Public License for more details.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Under Section 7 of GPL version 3, you are granted additional</span></span><br><span class="line"><span class="comment">// permissions described in the GCC Runtime Library Exception, version</span></span><br><span class="line"><span class="comment">// 3.1, as published by the Free Software Foundation.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// You should have received a copy of the GNU General Public License and</span></span><br><span class="line"><span class="comment">// a copy of the GCC Runtime Library Exception along with this program;</span></span><br><span class="line"><span class="comment">// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see</span></span><br><span class="line"><span class="comment">// &lt;Licenses - GNU Project - Free Software Foundation&gt;.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** @file stdc++.h</span></span><br><span class="line"><span class="comment"> *  This is an implementation file for a precompiled header.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 17.4.1.2 Headers</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _GLIBCXX_NO_ASSERT</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cassert&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cerrno&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfloat&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ciso646&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;clocale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csetjmp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;csignal&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdarg&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstddef&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ccomplex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cfenv&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cinttypes&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdalign&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdbool&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdint&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ctgmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwchar&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cwctype&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// C++</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bitset&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ios&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iosfwd&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;istream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iterator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;limits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;locale&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;streambuf&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeinfo&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;valarray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __cplusplus &gt;= 201103L</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;array&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;atomic&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;chrono&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;condition_variable&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;future&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;mutex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ratio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;regex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;scoped_allocator&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;system_error&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;tuple&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;typeindex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;type_traits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unordered_set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h1 id="bits-stdc-h的缺点"><a href="#bits-stdc-h的缺点" class="headerlink" title="bits/stdc++.h的缺点"></a><code>bits/stdc++.h</code>的缺点</h1><ul><li>bits/stdc++.h 不是GNU C++库的标准头文件，所以如果你在一些编译器（除了GCC）上编译你的代码，可能会失败，比如MSVC没有这个头文件。</li><li>使用它会包含很多不必要的东西，并且会增加编译时间</li><li>这个头文件不是C++标准的一部分，所以是不可移植的，应该尽量避免。</li><li>尽管标准中有一些通用的头文件，但还是应该避免使用它来代替特定的头文件，因为编译器在每次编译转换单元时都实际地读取并解析每个包含的头文件(包括递归包含的头文件)。</li></ul><h1 id="bits-stdc-h的优点"><a href="#bits-stdc-h的优点" class="headerlink" title="bits/stdc++.h的优点"></a><code>bits/stdc++.h</code>的优点</h1><ul><li>在比赛中,使用这个文件是一个好主意,当你想减少时间浪费在做选择的时候;特别是当你的排名对时间很敏感的时候。</li><li>这还减少了编写所有必要头文件的所有杂务。</li><li>你不必为使用的每个函数都记住GNU c++的所有STL。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在刷题的过程中，发现有&lt;code&gt;bits/stdc++.h&lt;/code&gt;这样一个头文件。&lt;/p&gt;
&lt;p&gt;发现它是部分C++中支持的一个几乎万能的头文件，包含所有的可用到的C++库函数，如istream, ostream, stack, queue.&lt;/p&gt;
&lt;p&gt;该头文件的详细内容如下&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://haokailong.top/categories/C/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="STL" scheme="http://haokailong.top/tags/STL/"/>
    
  </entry>
  
  <entry>
    <title>笔试经验总结</title>
    <link href="http://haokailong.top/2021/04/04/%E7%AC%94%E8%AF%95%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    <id>http://haokailong.top/2021/04/04/笔试经验总结/</id>
    <published>2021-04-04T07:24:50.000Z</published>
    <updated>2021-04-04T07:35:41.130Z</updated>
    
    <content type="html"><![CDATA[<p>已经有过几次笔试的经验了，也经历了不少的失败和挫折，做一个总结：</p><ol><li>ACM格式比LeetCode要难，因为要自己处理输入输出，需要保证处理的正确而且速度快；另外，需要自己考虑到所有的corner case。<strong>在LeetCode上会提示测试通不过的样例，不要看！</strong>这是一个很不好的习惯，会形成依赖。要在脑海中自己把问题考虑周全。</li><li>要先把题目看一遍，<strong>如果某个题短时间内不能有一个</strong><font color="orange"><strong>清晰直接</strong></font><strong>的思路，多半是自己搞错了</strong>。不要浪费时间！</li><li>要熟练掌握C++中的STL和常用函数。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;已经有过几次笔试的经验了，也经历了不少的失败和挫折，做一个总结：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ACM格式比LeetCode要难，因为要自己处理输入输出，需要保证处理的正确而且速度快；另外，需要自己考虑到所有的corner case。&lt;strong&gt;在LeetCode上会提示测
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="ACM" scheme="http://haokailong.top/tags/ACM/"/>
    
      <category term="OJ" scheme="http://haokailong.top/tags/OJ/"/>
    
      <category term="LeetCode" scheme="http://haokailong.top/tags/LeetCode/"/>
    
      <category term="Interview" scheme="http://haokailong.top/tags/Interview/"/>
    
      <category term="春招" scheme="http://haokailong.top/tags/%E6%98%A5%E6%8B%9B/"/>
    
      <category term="笔试" scheme="http://haokailong.top/tags/%E7%AC%94%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>int long 和 long long 的区别</title>
    <link href="http://haokailong.top/2021/04/03/int-long-%E5%92%8C-long-long-%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://haokailong.top/2021/04/03/int-long-和-long-long-的区别/</id>
    <published>2021-04-03T08:56:35.000Z</published>
    <updated>2021-04-03T09:11:03.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="int"><a href="#int" class="headerlink" title="int"></a>int</h3><p>(4个字节，32位)</p><p>unsigned int: 0 ~ 4294967295</p><p>int: -2147483648 ~ 2147483647</p><h3 id="int32"><a href="#int32" class="headerlink" title="_int32"></a>_int32</h3><p>(4个字节，32位)<br>unsigned _int32: 0～4294967295<br>_int32: -2147483648 ~ 2147483647</p><h3 id="long"><a href="#long" class="headerlink" title="long"></a>long</h3><p>(4个字节，32位)<br>unsigned long: 0～4294967295<br>long: -2147483648～2147483647</p><h3 id="long-long"><a href="#long-long" class="headerlink" title="long long"></a>long long</h3><p>(8个字节，64位)<br>unsigned long long：0~1844674407370955161<br>long long：-9223372036854775808~9223372036854775807</p><a id="more"></a><h3 id="int64"><a href="#int64" class="headerlink" title="_int64"></a>_int64</h3><p>(8个字节，64位)<br>unsigned _int64：0~18446744073709551615<br>_int64：-9223372036854775808~9223372036854775807</p><h2 id="为什么有long和long-long"><a href="#为什么有long和long-long" class="headerlink" title="为什么有long和long long?"></a>为什么有long和long long?</h2><ul><li>早期的操作系统是16位系统</li></ul><p>int用两个字节表示，范围是-32768 ~ 32767</p><p>long用四个字节表示，范围是-2147483648 ~ 2147483647</p><ul><li>后来发展到32位操作系统</li></ul><p>int用四个字节表示，与long相同</p><ul><li>目前操作系统已经发展到64位操作系统，<strong>但因程序编译工艺的不同，两者表现出不同的差别</strong>:</li></ul><p>32位编译系统：int占四字节，与long相同</p><p>64位编译系统：int占四字节，long占八字节，long数据范围变为：$-2^{63} \sim 2^{63}-1$</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;区别&quot;&gt;&lt;a href=&quot;#区别&quot; class=&quot;headerlink&quot; title=&quot;区别&quot;&gt;&lt;/a&gt;区别&lt;/h2&gt;&lt;h3 id=&quot;int&quot;&gt;&lt;a href=&quot;#int&quot; class=&quot;headerlink&quot; title=&quot;int&quot;&gt;&lt;/a&gt;int&lt;/h3&gt;&lt;p&gt;(4个字节，32位)&lt;/p&gt;
&lt;p&gt;unsigned int: 0 ~ 4294967295&lt;/p&gt;
&lt;p&gt;int: -2147483648 ~ 2147483647&lt;/p&gt;
&lt;h3 id=&quot;int32&quot;&gt;&lt;a href=&quot;#int32&quot; class=&quot;headerlink&quot; title=&quot;_int32&quot;&gt;&lt;/a&gt;_int32&lt;/h3&gt;&lt;p&gt;(4个字节，32位)&lt;br&gt;unsigned _int32: 0～4294967295&lt;br&gt;_int32: -2147483648 ~ 2147483647&lt;/p&gt;
&lt;h3 id=&quot;long&quot;&gt;&lt;a href=&quot;#long&quot; class=&quot;headerlink&quot; title=&quot;long&quot;&gt;&lt;/a&gt;long&lt;/h3&gt;&lt;p&gt;(4个字节，32位)&lt;br&gt;unsigned long: 0～4294967295&lt;br&gt;long: -2147483648～2147483647&lt;/p&gt;
&lt;h3 id=&quot;long-long&quot;&gt;&lt;a href=&quot;#long-long&quot; class=&quot;headerlink&quot; title=&quot;long long&quot;&gt;&lt;/a&gt;long long&lt;/h3&gt;&lt;p&gt;(8个字节，64位)&lt;br&gt;unsigned long long：0~1844674407370955161&lt;br&gt;long long：-9223372036854775808~9223372036854775807&lt;/p&gt;
    
    </summary>
    
    
      <category term="C++" scheme="http://haokailong.top/categories/C/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="int" scheme="http://haokailong.top/tags/int/"/>
    
      <category term="long" scheme="http://haokailong.top/tags/long/"/>
    
      <category term="long long" scheme="http://haokailong.top/tags/long-long/"/>
    
      <category term="整型" scheme="http://haokailong.top/tags/%E6%95%B4%E5%9E%8B/"/>
    
      <category term="integer" scheme="http://haokailong.top/tags/integer/"/>
    
  </entry>
  
  <entry>
    <title>快速排序</title>
    <link href="http://haokailong.top/2021/04/01/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    <id>http://haokailong.top/2021/04/01/快速排序/</id>
    <published>2021-04-01T12:10:48.000Z</published>
    <updated>2021-04-01T12:52:42.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一、算法思想"><a href="#一、算法思想" class="headerlink" title="一、算法思想"></a>一、算法思想</h1><p>快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p><h1 id="二、实现原理"><a href="#二、实现原理" class="headerlink" title="二、实现原理"></a>二、实现原理</h1><p>2.1、设置两个变量 low、high，<strong>排序开始时：low=0，high=size-1。</strong><br>2.2、整个数组找基准正确位置，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面</p><ul><li>默认数组的第一个数为基准数据，赋值给key，即key=array[low]。</li><li>因为默认数组的第一个数为基准，<strong>所以从后面开始向前搜索（high—）</strong>，找到第一个<strong>小于</strong>key的array[high]，就将 array[high] 赋给 array[low]，即 array[low] = array[high]。（循环条件是 array[high] &gt;= key；结束时 array[high] &lt; key）</li><li>此时从前面开始向后搜索（low++），找到第一个<strong>大于</strong>key的array[low]，就将 array[low] 赋给 array[high]，即 array[high] = array[low]。（循环条件是 array[low] &lt;= key；结束时 array[low] &gt; key）</li><li>循环 2-3 步骤，直到 low=high，该位置就是基准位置。</li><li>把基准数据赋给当前位置。</li></ul><p>2.3、第一趟找到的基准位置，作为下一趟的分界点。<br>2.4、递归调用（recursive）分界点前和分界点后的子数组排序，重复2.2、2.3、2.4的步骤。<br>2.5、最终就会得到排序好的数组。</p><a id="more"></a><h1 id="三、稳定性"><a href="#三、稳定性" class="headerlink" title="三、稳定性"></a>三、稳定性</h1><p>快速排序算法是不稳定的。也就是说，相同大小的元素可能在排序前后位置有所调换。</p><p>可以将排序算法实现为稳定算法，但是可能会带来性能的下降。</p><blockquote><p>参考CSDN博客：</p><p><a href="https://blog.csdn.net/gaoxueyi551/article/details/89413936" target="_blank" rel="noopener">https://blog.csdn.net/gaoxueyi551/article/details/89413936</a></p></blockquote><h1 id="四、C-实现"><a href="#四、C-实现" class="headerlink" title="四、C++实现"></a>四、C++实现</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quicksort</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> s, <span class="keyword">int</span> e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (s &gt;= e)  <span class="comment">// 终止条件 </span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> pivot = a[s];</span><br><span class="line"><span class="keyword">int</span> high = e;</span><br><span class="line"><span class="keyword">int</span> low = s;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high) &#123;</span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; a[high] &gt;= pivot) --high;</span><br><span class="line">a[low] = a[high];</span><br><span class="line"><span class="keyword">while</span> (low &lt; high &amp;&amp; a[low] &lt;= pivot) ++low;</span><br><span class="line">a[high] = a[low];</span><br><span class="line">&#125;</span><br><span class="line">a[low] = pivot;  <span class="comment">// low == high</span></span><br><span class="line">quicksort(a, s, low - <span class="number">1</span>);</span><br><span class="line">quicksort(a, low + <span class="number">1</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">10</span>] = &#123;<span class="number">0</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">8</span>&#125;;</span><br><span class="line">quicksort(a, <span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">' '</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;一、算法思想&quot;&gt;&lt;a href=&quot;#一、算法思想&quot; class=&quot;headerlink&quot; title=&quot;一、算法思想&quot;&gt;&lt;/a&gt;一、算法思想&lt;/h1&gt;&lt;p&gt;快速排序的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。&lt;/p&gt;
&lt;h1 id=&quot;二、实现原理&quot;&gt;&lt;a href=&quot;#二、实现原理&quot; class=&quot;headerlink&quot; title=&quot;二、实现原理&quot;&gt;&lt;/a&gt;二、实现原理&lt;/h1&gt;&lt;p&gt;2.1、设置两个变量 low、high，&lt;strong&gt;排序开始时：low=0，high=size-1。&lt;/strong&gt;&lt;br&gt;2.2、整个数组找基准正确位置，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认数组的第一个数为基准数据，赋值给key，即key=array[low]。&lt;/li&gt;
&lt;li&gt;因为默认数组的第一个数为基准，&lt;strong&gt;所以从后面开始向前搜索（high—）&lt;/strong&gt;，找到第一个&lt;strong&gt;小于&lt;/strong&gt;key的array[high]，就将 array[high] 赋给 array[low]，即 array[low] = array[high]。（循环条件是 array[high] &amp;gt;= key；结束时 array[high] &amp;lt; key）&lt;/li&gt;
&lt;li&gt;此时从前面开始向后搜索（low++），找到第一个&lt;strong&gt;大于&lt;/strong&gt;key的array[low]，就将 array[low] 赋给 array[high]，即 array[high] = array[low]。（循环条件是 array[low] &amp;lt;= key；结束时 array[low] &amp;gt; key）&lt;/li&gt;
&lt;li&gt;循环 2-3 步骤，直到 low=high，该位置就是基准位置。&lt;/li&gt;
&lt;li&gt;把基准数据赋给当前位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.3、第一趟找到的基准位置，作为下一趟的分界点。&lt;br&gt;2.4、递归调用（recursive）分界点前和分界点后的子数组排序，重复2.2、2.3、2.4的步骤。&lt;br&gt;2.5、最终就会得到排序好的数组。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Interview" scheme="http://haokailong.top/categories/Others/Interview/"/>
    
    
      <category term="C++" scheme="http://haokailong.top/tags/C/"/>
    
      <category term="sort" scheme="http://haokailong.top/tags/sort/"/>
    
      <category term="quick sort" scheme="http://haokailong.top/tags/quick-sort/"/>
    
      <category term="algorithm" scheme="http://haokailong.top/tags/algorithm/"/>
    
  </entry>
  
  <entry>
    <title>文件路径分割</title>
    <link href="http://haokailong.top/2021/03/30/%E6%96%87%E4%BB%B6%E8%B7%AF%E5%BE%84%E5%88%86%E5%89%B2/"/>
    <id>http://haokailong.top/2021/03/30/文件路径分割/</id>
    <published>2021-03-30T05:11:58.000Z</published>
    <updated>2021-03-30T05:13:58.676Z</updated>
    
    <content type="html"><![CDATA[<p>直接垒代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_path = <span class="string">"E:/tt/abc.py"</span></span><br><span class="line">filepath,fullflname = os.path.split(file_path)</span><br><span class="line">fname,ext = os.path.splitext(fullflname)</span><br></pre></td></tr></table></figure><p>运行结果:<br>filepath为文件的目录,即E:/tt<br>fullflname为文件名的全名，即abc.py<br>fname为文件的名字,即abc<br>ext为文件的扩展名,即.py</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接垒代码&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Tool" scheme="http://haokailong.top/categories/Others/Tool/"/>
    
    
      <category term="python" scheme="http://haokailong.top/tags/python/"/>
    
      <category term="os" scheme="http://haokailong.top/tags/os/"/>
    
      <category term="split" scheme="http://haokailong.top/tags/split/"/>
    
  </entry>
  
  <entry>
    <title>python遍历文件夹获取文件</title>
    <link href="http://haokailong.top/2021/03/29/python%E9%81%8D%E5%8E%86%E6%96%87%E4%BB%B6%E5%A4%B9%E8%8E%B7%E5%8F%96%E6%96%87%E4%BB%B6/"/>
    <id>http://haokailong.top/2021/03/29/python遍历文件夹获取文件/</id>
    <published>2021-03-29T15:28:45.000Z</published>
    <updated>2021-03-30T04:43:47.594Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-手写递归"><a href="#1-手写递归" class="headerlink" title="1. 手写递归"></a>1. 手写递归</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getallfile</span><span class="params">(path)</span>:</span></span><br><span class="line">    allfilelist=os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> allfilelist:</span><br><span class="line">        filepath=os.path.join(path,file)</span><br><span class="line">        <span class="comment">#判断是不是文件夹</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isdir(filepath):</span><br><span class="line">            getallfile(filepath)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">        allfile.append(filepath)</span><br><span class="line">    <span class="keyword">return</span> allfile</span><br></pre></td></tr></table></figure><h2 id="2-os-walk"><a href="#2-os-walk" class="headerlink" title="2. os.walk()"></a>2. os.walk()</h2><p><code>os.walk(top, topdown=True, οnerrοr=None, followlinks=False)</code><br>返回一个3个元素的元祖，(dirpath, dirnames, filenames),<br>dirpath：要列出指定目录的路径<br>dirnames：目录下的所有文件夹<br>filenames：目录下的所有文件</p><a id="more"></a><p>参数一：top – 根目录下的每一个文件夹(包含它自己), 产生3-元组 (dirpath, dirnames, filenames)【文件夹路径, 文件夹名字, 文件名】。</p><p>参数二：topdown –可选，为True或者没有指定, 一个目录的的3-元组将比它的任何子文件夹的3-元组先产生 (目录自上而下)。如果topdown为 False, 一个目录的3-元组将比它的任何子文件夹的3-元组后产生 (目录自下而上)。</p><p>参数三：onerror – 可选，是一个函数; 它调用时有一个参数, 一个OSError实例。报告这错误后，继续walk,或者抛出exception终止walk。</p><p>参数四：followlinks – 设置为 true，则通过软链接访问目录。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getallfiles</span><span class="params">(path)</span>:</span></span><br><span class="line">    allfile=[]</span><br><span class="line">    <span class="keyword">for</span> dirpath,dirnames,filenames <span class="keyword">in</span> os.walk(path):</span><br><span class="line">        <span class="keyword">for</span> dir <span class="keyword">in</span> dirnames:</span><br><span class="line">            allfile.append(os.path.join(dirpath,dir))</span><br><span class="line">        <span class="keyword">for</span> name <span class="keyword">in</span> filenames:</span><br><span class="line">            allfile.append(os.path.join(dirpath, name))</span><br><span class="line">    <span class="keyword">return</span> allfile</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-手写递归&quot;&gt;&lt;a href=&quot;#1-手写递归&quot; class=&quot;headerlink&quot; title=&quot;1. 手写递归&quot;&gt;&lt;/a&gt;1. 手写递归&lt;/h2&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getallfile&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(path)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    allfilelist=os.listdir(path)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; file &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; allfilelist:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        filepath=os.path.join(path,file)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;#判断是不是文件夹&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; os.path.isdir(filepath):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            getallfile(filepath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        	allfile.append(filepath)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; allfile&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-os-walk&quot;&gt;&lt;a href=&quot;#2-os-walk&quot; class=&quot;headerlink&quot; title=&quot;2. os.walk()&quot;&gt;&lt;/a&gt;2. os.walk()&lt;/h2&gt;&lt;p&gt;&lt;code&gt;os.walk(top, topdown=True, οnerrοr=None, followlinks=False)&lt;/code&gt;&lt;br&gt;返回一个3个元素的元祖，(dirpath, dirnames, filenames),&lt;br&gt;dirpath：要列出指定目录的路径&lt;br&gt;dirnames：目录下的所有文件夹&lt;br&gt;filenames：目录下的所有文件&lt;/p&gt;
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
      <category term="Tool" scheme="http://haokailong.top/categories/Others/Tool/"/>
    
    
      <category term="python" scheme="http://haokailong.top/tags/python/"/>
    
      <category term="walk" scheme="http://haokailong.top/tags/walk/"/>
    
      <category term="os" scheme="http://haokailong.top/tags/os/"/>
    
      <category term="recursive" scheme="http://haokailong.top/tags/recursive/"/>
    
  </entry>
  
  <entry>
    <title>直观理解线性变换</title>
    <link href="http://haokailong.top/2021/03/29/%E7%9B%B4%E8%A7%82%E7%90%86%E8%A7%A3%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/"/>
    <id>http://haokailong.top/2021/03/29/直观理解线性变换/</id>
    <published>2021-03-29T12:41:54.000Z</published>
    <updated>2021-03-29T12:47:03.315Z</updated>
    
    <content type="html"><![CDATA[<p>直观一点理解，线性变换是一种运动，即让每一个输入向量都<strong>移动</strong>到对应输出向量的位置。</p><p>那么这样，线性变换这个关于向量的移动，就可以直观地变成了坐标系上点的运动。</p><p>简单来说，线性变换可以看作是坐标系“<strong>整体、均匀</strong>”的变换。</p><p>更详细地参见以下这个视频：</p><p><a href="https://www.bilibili.com/video/av6043439" target="_blank" rel="noopener">https://www.bilibili.com/video/av6043439</a></p><p>而<strong>仿射变换 (Affine Transformation)</strong>会改变原点的位置，而<strong>线性变换 (Linear Transformation)</strong>不改变原点的位置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直观一点理解，线性变换是一种运动，即让每一个输入向量都&lt;strong&gt;移动&lt;/strong&gt;到对应输出向量的位置。&lt;/p&gt;
&lt;p&gt;那么这样，线性变换这个关于向量的移动，就可以直观地变成了坐标系上点的运动。&lt;/p&gt;
&lt;p&gt;简单来说，线性变换可以看作是坐标系“&lt;strong&gt;整
      
    
    </summary>
    
    
      <category term="Mathmatic" scheme="http://haokailong.top/categories/Mathmatic/"/>
    
    
      <category term="Linear Transformation" scheme="http://haokailong.top/tags/Linear-Transformation/"/>
    
      <category term="Affine Transformation" scheme="http://haokailong.top/tags/Affine-Transformation/"/>
    
      <category term="线性变换" scheme="http://haokailong.top/tags/%E7%BA%BF%E6%80%A7%E5%8F%98%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>SMOTE上采样方法</title>
    <link href="http://haokailong.top/2021/03/29/SMOTE%E4%B8%8A%E9%87%87%E6%A0%B7%E6%96%B9%E6%B3%95/"/>
    <id>http://haokailong.top/2021/03/29/SMOTE上采样方法/</id>
    <published>2021-03-29T11:17:23.000Z</published>
    <updated>2021-03-29T11:52:59.801Z</updated>
    
    <content type="html"><![CDATA[<p>SMOTE or <strong>Synthetic Minority Oversampling Technique</strong></p><p>经典的上采样方法是直接将少数类别的样本重复若干次。但是这种方法没有带来新的信息。</p><blockquote><p>SMOTE works by utilizing a <strong>k-nearest neighbor</strong> algorithm to create synthetic data. SMOTE first start by choosing random data from the minority class, then k-nearest neighbors from the data are set. Synthetic data would then made between the random data and the randomly selected k-nearest neighbor. Let me show you the example below.</p></blockquote><h2 id="1-SMOTE使用"><a href="#1-SMOTE使用" class="headerlink" title="1. SMOTE使用"></a>1. SMOTE使用</h2><p>SMOTE适用于特征值为连续值而不是离散值。这样才可以进行插值，产生新的训练数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> seaborns <span class="keyword">as</span> sns</span><br><span class="line"><span class="comment">#I read the csv churn data into variable called df. Here I would only use two continuous features CreditScore and Age with the target Exited</span></span><br><span class="line">df_example = df[[<span class="string">'CreditScore'</span>, <span class="string">'Age'</span>, <span class="string">'Exited'</span>]]</span><br><span class="line">sns.scatterplot(data = df, x =<span class="string">'CreditScore'</span>, y = <span class="string">'Age'</span>, hue = <span class="string">'Exited'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://miro.medium.com/max/487/1*53v1-PbF5uCiSZnLKDJZ5w.png" alt></p><p>然后使用SMOTE上采样，查看采样之后的结果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install -U imbalanced-learn</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Importing SMOTE</span></span><br><span class="line"><span class="keyword">from</span> imblearn.over_sampling <span class="keyword">import</span> SMOTE</span><br><span class="line"><span class="comment">#Oversampling the data</span></span><br><span class="line">smote = SMOTE(random_state = <span class="number">101</span>)</span><br><span class="line">X, y = smote.fit_resample(df[[<span class="string">'CreditScore'</span>, <span class="string">'Age'</span>]], df[<span class="string">'Exited'</span>])</span><br><span class="line"><span class="comment">#Creating a new Oversampling Data Frame</span></span><br><span class="line">df_oversampler = pd.DataFrame(X, columns = [<span class="string">'CreditScore'</span>, <span class="string">'Age'</span>])</span><br><span class="line">df_oversampler[<span class="string">'Exited'</span>]</span><br><span class="line">sns.countplot(df_oversampler[<span class="string">'Exited'</span>])</span><br><span class="line">sns.scatterplot(data = df_oversampler, x =<span class="string">'CreditScore'</span>, y = <span class="string">'Age'</span>, hue = <span class="string">'Exited'</span>)</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="https://miro.medium.com/max/498/1*BVlx5Mo-1L3pbnKCT_N9Nw.png" alt></p><h2 id="2-SMOTE原理"><a href="#2-SMOTE原理" class="headerlink" title="2. SMOTE原理"></a>2. SMOTE原理</h2><p>算法流程：</p><ol><li>对于少数类中每一个样本$x$，以欧氏距离为标准计算它到少数类样本集$S_{min}$所有样本的距离，得到其k近邻。</li><li>根据样本不平衡比例设置一个采样比例以确定采样倍率N，对于每一个少数类样本$x$，从其k近邻中随机选择若干个样本，假设选择的近邻为$x_n$</li><li>对于每一个随机选出的近邻$x_n$，分别与原样本按照如下的公式构建新的样本</li></ol><script type="math/tex; mode=display">x_{new} = x + \mathrm{rand}（0,1）*|x - x_n|</script><p>很直白很容易理解，就是用某个样本与其近邻做插值。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SMOTE or &lt;strong&gt;Synthetic Minority Oversampling Technique&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;经典的上采样方法是直接将少数类别的样本重复若干次。但是这种方法没有带来新的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SMOTE works by utilizing a &lt;strong&gt;k-nearest neighbor&lt;/strong&gt; algorithm to create synthetic data. SMOTE first start by choosing random data from the minority class, then k-nearest neighbors from the data are set. Synthetic data would then made between the random data and the randomly selected k-nearest neighbor. Let me show you the example below.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-SMOTE使用&quot;&gt;&lt;a href=&quot;#1-SMOTE使用&quot; class=&quot;headerlink&quot; title=&quot;1. SMOTE使用&quot;&gt;&lt;/a&gt;1. SMOTE使用&lt;/h2&gt;&lt;p&gt;SMOTE适用于特征值为连续值而不是离散值。这样才可以进行插值，产生新的训练数据。&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; pandas &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; seaborns &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; sns&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#I read the csv churn data into variable called df. Here I would only use two continuous features CreditScore and Age with the target Exited&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df_example = df[[&lt;span class=&quot;string&quot;&gt;&#39;CreditScore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Age&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sns.scatterplot(data = df, x =&lt;span class=&quot;string&quot;&gt;&#39;CreditScore&#39;&lt;/span&gt;, y = &lt;span class=&quot;string&quot;&gt;&#39;Age&#39;&lt;/span&gt;, hue = &lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/487/1*53v1-PbF5uCiSZnLKDJZ5w.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;然后使用SMOTE上采样，查看采样之后的结果：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pip install -U imbalanced-learn&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Importing SMOTE&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; imblearn.over_sampling &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SMOTE&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Oversampling the data&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;smote = SMOTE(random_state = &lt;span class=&quot;number&quot;&gt;101&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;X, y = smote.fit_resample(df[[&lt;span class=&quot;string&quot;&gt;&#39;CreditScore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Age&#39;&lt;/span&gt;]], df[&lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#Creating a new Oversampling Data Frame&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df_oversampler = pd.DataFrame(X, columns = [&lt;span class=&quot;string&quot;&gt;&#39;CreditScore&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Age&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;df_oversampler[&lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sns.countplot(df_oversampler[&lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sns.scatterplot(data = df_oversampler, x =&lt;span class=&quot;string&quot;&gt;&#39;CreditScore&#39;&lt;/span&gt;, y = &lt;span class=&quot;string&quot;&gt;&#39;Age&#39;&lt;/span&gt;, hue = &lt;span class=&quot;string&quot;&gt;&#39;Exited&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://haokailong.top/categories/Machine-Learning/"/>
    
    
      <category term="SMOTE" scheme="http://haokailong.top/tags/SMOTE/"/>
    
      <category term="oversampling" scheme="http://haokailong.top/tags/oversampling/"/>
    
  </entry>
  
  <entry>
    <title>通俗理解困惑度(Perplexity)</title>
    <link href="http://haokailong.top/2021/03/29/%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3%E5%9B%B0%E6%83%91%E5%BA%A6-Perplexity/"/>
    <id>http://haokailong.top/2021/03/29/通俗理解困惑度-Perplexity/</id>
    <published>2021-03-29T06:05:22.000Z</published>
    <updated>2021-03-29T06:24:31.498Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、语言模型"><a href="#一、语言模型" class="headerlink" title="一、语言模型"></a><strong>一、语言模型</strong></h2><p>本文尽量通俗解释一下困惑度的概念。既然题目中写了是用来评价语言模型的好坏，那么首先来看一下语言模型：</p><p><strong>简单地说，语言模型就是用来计算一个句子的概率的模型，也就是判断一句话是否是人话的概率？</strong></p><p>那么如何计算一个句子的概率呢？给定句子（词语序列）</p><p>$S= W_1, …, W_k$</p><p>它的概率可以表示为：</p><p>$\mathrm{P}(x) = \mathrm{P}(W<em>1, …, W_k) = \mathrm{P}(W_1)\mathrm{P}(W_2|W_1)…\mathrm{P}(W_k|W_1,…,W</em>{k-1})$</p><p>也就是说在给定一句话的前k个词，我们希望<strong>语言模型</strong>可以预测第k+1个词是什么，即给出一个第k+1个词可能出现的概率的分布。</p><p>那么如何学习到一个语言模型呢，这里不详细叙述。</p><h2 id="二、如何评价一个语言模型好坏"><a href="#二、如何评价一个语言模型好坏" class="headerlink" title="二、如何评价一个语言模型好坏"></a><strong>二、如何评价一个语言模型好坏</strong></h2><p>在得到不同的语言模型（一元语言模型、二元语言模型….）的时候，我们如何判断一个语言模型是否好还是坏，一般有两种方法：</p><p>1、一种方法将其应用到具体的问题当中，比如机器翻译、speech recognition、spelling corrector等。然后看这个语言模型在这些任务中的表现（extrinsic evaluation，or in-vivo evaluation）。但是，这种方法一方面难以操作，另一方面可能非常耗时，可能跑一个evaluation需要大量时间，费时难操作。</p><p>2、针对第一种方法的缺点，大家想是否可以根据与语言模型自身的一些特性，来设计一种简单易行，而又行之有效的评测指标。于是，人们就发明了perplexity这个指标。</p><p>困惑度（perplexity）的基本思想是：<strong>给测试集的句子赋予较高概率值的语言模型较好,当语言模型训练完之后，测试集中的句子都是正常的句子，那么训练好的模型就是在测试集上的概率越高越好，</strong>公式如下：</p><p>$\mathrm{PP}(W) = \mathrm{P}(w_1, …,w_N) ^ {-\frac{1}{N}} = \sqrt[N]{\frac{1}{\mathrm{P}(w_1,…,w_N)}} $</p><p>由公式可知，<strong>句子概率越大，语言模型越好，迷惑度越小。</strong></p><a id="more"></a><p>下面是一些 ngra­m 模型经 训练文本后在测试集上的困惑度值：</p><p><img src="https://pic1.zhimg.com/80/v2-da6384d62d15cd61e36d5749ff127670_720w.jpg" alt></p><p>可以看到， trigram 模型经训练后，相比于 unigram 模型，困惑度由955跌减至74，这是十分可观的结果。</p><p>这节的核心就是<strong>句子概率越大，语言模型越好，迷惑度越小。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一、语言模型&quot;&gt;&lt;a href=&quot;#一、语言模型&quot; class=&quot;headerlink&quot; title=&quot;一、语言模型&quot;&gt;&lt;/a&gt;&lt;strong&gt;一、语言模型&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;本文尽量通俗解释一下困惑度的概念。既然题目中写了是用来评价语言模型的好坏，那么首先来看一下语言模型：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;简单地说，语言模型就是用来计算一个句子的概率的模型，也就是判断一句话是否是人话的概率？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;那么如何计算一个句子的概率呢？给定句子（词语序列）&lt;/p&gt;
&lt;p&gt;$S= W_1, …, W_k$&lt;/p&gt;
&lt;p&gt;它的概率可以表示为：&lt;/p&gt;
&lt;p&gt;$\mathrm{P}(x) = \mathrm{P}(W&lt;em&gt;1, …, W_k) = \mathrm{P}(W_1)\mathrm{P}(W_2|W_1)…\mathrm{P}(W_k|W_1,…,W&lt;/em&gt;{k-1})$&lt;/p&gt;
&lt;p&gt;也就是说在给定一句话的前k个词，我们希望&lt;strong&gt;语言模型&lt;/strong&gt;可以预测第k+1个词是什么，即给出一个第k+1个词可能出现的概率的分布。&lt;/p&gt;
&lt;p&gt;那么如何学习到一个语言模型呢，这里不详细叙述。&lt;/p&gt;
&lt;h2 id=&quot;二、如何评价一个语言模型好坏&quot;&gt;&lt;a href=&quot;#二、如何评价一个语言模型好坏&quot; class=&quot;headerlink&quot; title=&quot;二、如何评价一个语言模型好坏&quot;&gt;&lt;/a&gt;&lt;strong&gt;二、如何评价一个语言模型好坏&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;在得到不同的语言模型（一元语言模型、二元语言模型….）的时候，我们如何判断一个语言模型是否好还是坏，一般有两种方法：&lt;/p&gt;
&lt;p&gt;1、一种方法将其应用到具体的问题当中，比如机器翻译、speech recognition、spelling corrector等。然后看这个语言模型在这些任务中的表现（extrinsic evaluation，or in-vivo evaluation）。但是，这种方法一方面难以操作，另一方面可能非常耗时，可能跑一个evaluation需要大量时间，费时难操作。&lt;/p&gt;
&lt;p&gt;2、针对第一种方法的缺点，大家想是否可以根据与语言模型自身的一些特性，来设计一种简单易行，而又行之有效的评测指标。于是，人们就发明了perplexity这个指标。&lt;/p&gt;
&lt;p&gt;困惑度（perplexity）的基本思想是：&lt;strong&gt;给测试集的句子赋予较高概率值的语言模型较好,当语言模型训练完之后，测试集中的句子都是正常的句子，那么训练好的模型就是在测试集上的概率越高越好，&lt;/strong&gt;公式如下：&lt;/p&gt;
&lt;p&gt;$\mathrm{PP}(W) = \mathrm{P}(w_1, …,w_N) ^ {-\frac{1}{N}} = \sqrt[N]{\frac{1}{\mathrm{P}(w_1,…,w_N)}} $&lt;/p&gt;
&lt;p&gt;由公式可知，&lt;strong&gt;句子概率越大，语言模型越好，迷惑度越小。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Pretrained Language Model" scheme="http://haokailong.top/categories/Pretrained-Language-Model/"/>
    
    
      <category term="PLM" scheme="http://haokailong.top/tags/PLM/"/>
    
      <category term="Perplexity" scheme="http://haokailong.top/tags/Perplexity/"/>
    
      <category term="困惑度" scheme="http://haokailong.top/tags/%E5%9B%B0%E6%83%91%E5%BA%A6/"/>
    
      <category term="Pretrained Language Model" scheme="http://haokailong.top/tags/Pretrained-Language-Model/"/>
    
  </entry>
  
  <entry>
    <title>点互信息</title>
    <link href="http://haokailong.top/2021/03/29/%E7%82%B9%E4%BA%92%E4%BF%A1%E6%81%AF/"/>
    <id>http://haokailong.top/2021/03/29/点互信息/</id>
    <published>2021-03-29T05:41:52.000Z</published>
    <updated>2021-03-29T06:04:09.884Z</updated>
    
    <content type="html"><![CDATA[<p>在数据挖掘或者信息检索的相关资料里，经常会用到PMI（Pointwise Mutual Information）这个指标来衡量两个事物之间的相关性。PMI的定义如下：</p><script type="math/tex; mode=display">\mathrm{PMI}(x, y) = \log \frac{\mathrm{p}(x,y)}{\mathrm{p}(x)\mathrm{p}(y)}</script><p>这个定义所体现的原理其实是相当直白的。<strong>在概率论中，我们知道，如果x跟y不相关，则 P(x,y) = P(x)P(y)。二者相关性越大，则 P(x,y) 就相比于 P(x)P(y) 越大。</strong>根据条件概率公式，你还可以写成</p><script type="math/tex; mode=display">\mathrm{PMI}(x,y) \equiv \log \frac{\mathrm{p}(x,y)}{\mathrm{p}(x)\mathrm{p}(y)} \equiv \log \frac{\mathrm{p}(x|y)}{\mathrm{p}(x)} \equiv \log \frac{\mathrm{p}(y|x)}{\mathrm{p}(y)}</script><p>这里的log来自于信息论的理论，而且 log 1 = 0 ，也恰恰表明P(x,y) = P(x)P(y)，相关性为0，而且log是单调递增函数，所以 “P(x,y) 就相比于 P(x)P(y) 越大，x 和 y 相关性越大” 这一性质也得到保留。</p><p>但是若$\mathrm{p}(x,y) = 0$，那就是你有可能会去计算 log 0 = -inf，即得到一个负无穷。为此人们通常会计算一个PPMI（Positive PMI）来避免出现 -inf，即</p><script type="math/tex; mode=display">\mathrm{PPMI}(x, y) =\max( \log \frac{\mathrm{p}(x,y)}{\mathrm{p}(x)\mathrm{p}(y)}, 0)</script>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在数据挖掘或者信息检索的相关资料里，经常会用到PMI（Pointwise Mutual Information）这个指标来衡量两个事物之间的相关性。PMI的定义如下：&lt;/p&gt;
&lt;script type=&quot;math/tex; mode=display&quot;&gt;
\mathrm{PM
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://haokailong.top/categories/Machine-Learning/"/>
    
    
      <category term="点互信息" scheme="http://haokailong.top/tags/%E7%82%B9%E4%BA%92%E4%BF%A1%E6%81%AF/"/>
    
      <category term="Pointwise Mutual Information" scheme="http://haokailong.top/tags/Pointwise-Mutual-Information/"/>
    
  </entry>
  
  <entry>
    <title>生成模型vs判别模型</title>
    <link href="http://haokailong.top/2021/03/29/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8Bvs%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B/"/>
    <id>http://haokailong.top/2021/03/29/生成模型vs判别模型/</id>
    <published>2021-03-29T02:19:15.000Z</published>
    <updated>2021-03-29T04:27:25.637Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>版权声明：本文为CSDN博主「CAM-TAY」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/u010358304/article/details/79748153" target="_blank" rel="noopener">https://blog.csdn.net/u010358304/article/details/79748153</a></p></blockquote><p>从概率分布的角度考虑，对于一堆样本数据，每个均有特征Xi对应分类标记yi。</p><p>生成模型：学习得到联合概率分布P(x,y)，即特征x和标记y共同出现的概率，然后求条件概率分布。能够学习到数据生成的机制。</p><p>判别模型：学习得到条件概率分布P(y|x)，即在特征x出现的情况下标记y出现的概率。</p><p>数据要求：生成模型需要的数据量比较大，能够较好地估计概率密度；而判别模型对数据样本量的要求没有那么多。</p><p><img src="https://img-blog.csdn.net/20180329224547767?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTAzNTgzMDQ=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;版权声明：本文为CSDN博主「CAM-TAY」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;br&gt;原文链接：&lt;a href=&quot;https://blog.csdn.net/u010358304/article/d
      
    
    </summary>
    
    
      <category term="Machine Learning" scheme="http://haokailong.top/categories/Machine-Learning/"/>
    
    
      <category term="生成模型" scheme="http://haokailong.top/tags/%E7%94%9F%E6%88%90%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="判别模型" scheme="http://haokailong.top/tags/%E5%88%A4%E5%88%AB%E6%A8%A1%E5%9E%8B/"/>
    
      <category term="generative" scheme="http://haokailong.top/tags/generative/"/>
    
      <category term="discriminative" scheme="http://haokailong.top/tags/discriminative/"/>
    
  </entry>
  
  <entry>
    <title>nvidia-smi报错NVIDIA-SMI has failed because it couldn&#39;t...</title>
    <link href="http://haokailong.top/2021/03/29/nvidia-smi%E6%8A%A5%E9%94%99NVIDIA-SMI-has-failed-because-it-couldn-t/"/>
    <id>http://haokailong.top/2021/03/29/nvidia-smi报错NVIDIA-SMI-has-failed-because-it-couldn-t/</id>
    <published>2021-03-29T02:04:34.000Z</published>
    <updated>2021-03-29T02:17:58.318Z</updated>
    
    <content type="html"><![CDATA[<font color="red">NVIDIA-SMI has failed because it couldn't communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is installed and running.</font><p>原因是版本不匹配导致的检测显卡驱动程序异常。</p><h1 id="1-检测版本"><a href="#1-检测版本" class="headerlink" title="1. 检测版本"></a>1. 检测版本</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dkms</span><br></pre></td></tr></table></figure><p>然后查看对应的驱动版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /usr/src</span><br></pre></td></tr></table></figure><p>对应结果为目录：<code>nvidia-418.87.01</code></p><h1 id="2-重新生成对应的驱动模块"><a href="#2-重新生成对应的驱动模块" class="headerlink" title="2. 重新生成对应的驱动模块"></a>2. 重新生成对应的驱动模块</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dkms install -m nvidia -v 418.87.01</span><br></pre></td></tr></table></figure><p>祝大家科研顺利🤭</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;red&quot;&gt;NVIDIA-SMI has failed because it couldn&#39;t communicate with the NVIDIA driver. Make sure that the latest NVIDIA driver is i
      
    
    </summary>
    
    
      <category term="Others" scheme="http://haokailong.top/categories/Others/"/>
    
    
      <category term="nvidia" scheme="http://haokailong.top/tags/nvidia/"/>
    
      <category term="NVIDIA-SMI" scheme="http://haokailong.top/tags/NVIDIA-SMI/"/>
    
  </entry>
  
</feed>
